/*
 * Message Decoding (CodeEval)
 * https://www.codeeval.com/open_challenges/36/
 *
 *
 *
 * Challenge Description:
 * ----------------------
 *
 * Some message encoding schemes require that an encoded message be sent in two 
 * parts. The first part, called the header, contains the characters of the 
 * message. The second part contains a pattern that represents the message. You 
 * must write a program that can decode messages under such a scheme. 
 * 
 * The heart of the encoding scheme for your program is a sequence of "key" 
 * strings of 0's and 1's as follows:
 * 
 *     0, 00, 01, 10, 000, 001, 010, 011, 100, 101, 110, 0000, 0001, 
 *     ..., 1011, 1110, 00000, ...
 *
 * The first key in the sequence is of length 1, the next 3 are of length 2, 
 * the next 7 of length 3, the next 15 of length 4, etc. If two adjacent keys 
 * have the same length, the second can be obtained from the first by adding 1 
 * (base 2). Notice that there are no keys in the sequence that consist only 
 * of 1's. The keys are mapped to the characters in the header in order. That 
 * is, the first key (0) is mapped to the first character in the header, the 
 * second key (00) to the second character in the header, the k-th key is mapped
 * to the k-th character in the header. For example, suppose the header is:
 * 
 *     AB#TANCnrtXc
 *
 * Then 0 is mapped to A, 00 to B, 01 to #, 10 to T, 000 to A, ..., 110 to X, 
 * and 0000 to c.
 *
 * The encoded message contains only 0's and 1's and possibly carriage returns, 
 * which are to be ignored. The message is divided into segments. The first 3 
 * digits of a segment give the binary representation of the length of the keys 
 * in the segment. For example, if the first 3 digits are 010, then the 
 * remainder of the segment consists of keys of length 2 (00, 01, or 10). The 
 * end of the segment is a string of 1's which is the same length as the length 
 * of the keys in the segment. So a segment of keys of length 2 is terminated 
 * by 11. The entire encoded message is terminated by 000 (which would signify 
 * a segment in which the keys have length 0). The message is decoded by 
 * translating the keys in the segments one-at-a-time into the header characters 
 * to which they have been mapped.
 * 
 * 
 *
 * Input sample:
 * -------------
 *
 * The input file contains several data sets. Each data set consists of a header
 * and a message. These will all be on one line. The length of the header is 
 * limited only by the fact that key strings have a maximum length of 7 (111 in 
 * binary). If there are multiple copies of a character in a header, then 
 * several keys will map to that character. The encoded message contains only 
 * 0's and 1's, and it is a legitimate encoding according to the described 
 * scheme. That is, the message segments begin with the 3-digit length sequence 
 * and end with the appropriate sequence of 1's. The keys in any given segment 
 * are all of the same length, and they all correspond to characters in the 
 * header. The message is terminated by 000. Your program should accept the 
 * first argument as the filename and read the contents of this file as the test 
 * data, according to the conditions above. E.g.
 *
 *     $#**\0100000101101100011100101000
 *
 * 
 *
 * Output sample:
 * --------------
 *
 * For each data set, your program must write its decoded message on a separate 
 * line. There should not be blank lines between messages. E.g.
 *
 *     ##*\$
 *     
 */


/*
 * SOLUTION
 * 
 * 
 *      segment        segment     segment   empty segment
 *   /-----------\   /---------\   /-----\   /-\
 *   
 *   010 000010 11   011 000 111   001 0 1   000   <====  input sample 
 *                                                        (split into segments)
 *   \-/ \----/ \/   \-/ \-/ \-/   \-/ | |   \-/          
 *   ST   \  /  \/   ST   C   ET   ST  C ET  ST
 *         C    \/
 *              ET 
 *   
 *   
 *   ST   start tag
 *   C    content
 *   ET   end tag 
 */



import scala.annotation.tailrec
import scala.math.pow
import scala.util.matching.Regex


class Lazy[T] (v: =>T) {
  private lazy val value = v
  def get: T = value
}



class SegmentManager(startTagLength: Int) {
  private val base = 2
  private def binaryValue(string: String): Int = Integer.parseInt(string, base)
  
  // partitions a (valid) encoded text into a list of words
  def partition(encodedText: String): List[String] = {
    val segments: List[Segment] = Segment.partition(encodedText)
    segments.flatMap(_.toWordList)
  }
  
  
  
  private class SegmentRegex(wordLength: Int) extends Regex(
      "([0|1]{" + startTagLength + "})" +
      "((?:[0|1]{" + wordLength + "})+?)" + 
      "(1{" + wordLength + "})",
      "startTag", "content", "endTag") {
  }
  
  
  
  private class Segment(wordLength: Int, text: String) {
  
    // length of the segment in the original message string (including tags)
    def length = startTagLength + text.length + wordLength
  
    // partitions segment content into words of appropriate length
    def toWordList: List[String] = text.grouped(wordLength).toList
  }
  
  
  
  private object EndSegment extends Segment(wordLength = 0, text = "") {
    override def toWordList: List[String] = Nil
  }
 
  

  private object Segment {
  
    def apply(wordLength: Int, content: String) = wordLength match {
      case 0 => EndSegment
      case _ => new Segment(wordLength, content)
    }
    
    // array of regexes for segments of word length 'index';
    // wrapped in Lazy to avoid unnecessary regex compilations
    private val rs: Array[Lazy[SegmentRegex]] = {
      val maxWordCount = pow(startTagLength, base).toInt - 1
      for (index <- Array.range(0, maxWordCount + 1))
          yield new Lazy(new SegmentRegex(index))
    }
    
    private def regex(wordLength: Int) = rs(wordLength).get

    // takes a (valid) encoded text and returns the leftmost segment
    private def headSegment(encodedText: String): Segment = {
      val wordLength = binaryValue(encodedText.take(startTagLength))
      val content = regex(wordLength).findPrefixMatchOf(encodedText).get.group("content")
      Segment(wordLength, content)
    }
  
    // takes a (valid) encoded text and partitions it into segments
    def partition(encodedText: String): List[Segment] = {
    
      @tailrec 
      def recurse(txt: String, acc: List[Segment]): List[Segment] = txt match {
        case "" => acc.reverse
        case _  => val nextSegment = headSegment(txt)
                   val remainder = txt.drop(nextSegment.length) 
                   recurse(remainder, nextSegment :: acc)
      } 
    
      recurse(encodedText, Nil)
    }
  }
}



class Encoding(startTagLength: Int, header: String) {
  
  // encoding is binary
  val base = 2
  
  // deals with the specific segment format
  val segmentManager = new SegmentManager(startTagLength)
    
  // source character c (associated with code word w) will be stored at index i, where
  // index(c) = [number of code words of length < length(w)] 
  //          + [number of code words of length == length(w) 
  //                                  and binary value < binaryValue(w)]
  val lookup = header.toCharArray
  
  // numeric value of a binary string
  def binaryValue(string: String): Int = Integer.parseInt(string, base)
  
  // number of valid code words of length <= len 
  def cumulativeWordCount(len: Int) = pow(base, len+1).toInt - len - 2
  
  // index of character associated with given code word in the lookup array
  def position(codeWord: String) = binaryValue(codeWord) + 
                                   cumulativeWordCount(codeWord.length-1)
  
  // decodes a given (valid) code word
  def decodeWord(codeWord: String): Char = lookup(position(codeWord))
  
  // decodes a given (valid) encoded text
  def decode(encodedText: String): String = {
    val words = segmentManager.partition(encodedText)
    words.map(decodeWord).mkString
  }
}



object Client {
  
  def main(args: Array[String]): Unit = {
    val startTagLength = 3
    val line = "$#**\\0100000101101100011100101000"
    val (header, message) = line.span{case c => c != '0' && c != '1'}
    val decodedMessage = (new Encoding(startTagLength, header)).decode(message)
    println(decodedMessage)
  }
}
